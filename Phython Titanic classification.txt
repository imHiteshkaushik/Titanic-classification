#Task 1
#Make a system which tells whether the person will be save from sinking. What factors were most likely lead to success-socio-economic status, age, gender and more.
#Python code
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load the Titanic dataset
titanic_data = pd.read_csv('titanic.csv')

# Select relevant features and target
features = ['Pclass', 'Age', 'Sex', 'Fare']
target = 'Survived'

# Preprocess data
titanic_data['Sex'] = titanic_data['Sex'].map({'male': 0, 'female': 1})
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

# Split dataset into features and target
X = titanic_data[features]
y = titanic_data[target]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a decision tree classifier
clf = DecisionTreeClassifier()

# Train the model
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Predict survival for a specific person
person_data = pd.DataFrame({
    'Pclass': [3],
    'Age': [25],
    'Sex': [0],
    'Fare': [10]
})

survival_prediction = clf.predict(person_data)
if survival_prediction[0] == 0:
    print("The person is not predicted to survive.")
else:
    print("The person is predicted to survive.")
